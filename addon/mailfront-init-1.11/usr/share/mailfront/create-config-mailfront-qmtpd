#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/mailfront
#
if test ! -f /etc/sysconfig/mailfront ; then
    echo >&2 "No /etc/sysconfig/mailfront found."
    exit 1
fi 
. /etc/sysconfig/mailfront

test "$MAILFRONT_CREATE_CONFIG" = yes || exit 0

# this file contains generic mail setup information
if test -s /etc/sysconfig/mail ; then
    . /etc/sysconfig/mail
    test "$MAIL_CREATE_CONFIG" = yes || exit 0
fi

#
# set qmail config dirs
#
QMTPDDIR="${1:-/etc/mailfront-qmtpd}"
QMTPDENV="$QMTPDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on $(env LANG=C date)
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/mailfront and restart the server.
#
#"

umask 022

test -z "$QMTP_ADDRESS" -o "$QMTP_ADDRESS" = 0 && \
    echo -n >"$QMTPDENV/ADDRESS" || \
    cat >"$QMTPDENV/ADDRESS" <<ETX
$QMTP_ADDRESS
#
# IP address the QMTP daemon should bind to on this host.
# Default is "0", which means to listen on all addresses of this host.
$PREAMBLE
ETX
    
test -z "$QMTP_PORT" -o "$QMTP_PORT" = 0 && \
    echo -n >"$QMTPDENV/PORT" || \
    cat >"$QMTPDENV/PORT" <<ETX
$QMTP_PORT
#
# Port number or name (from /etc/services) for the qmtp daemon.
$PREAMBLE
ETX

if test -z "$QMTP_LOCALNAME" ; then
    test -s /etc/HOSTNAME && \
	cp /etc/HOSTNAME "$QMTPDENV/LOCALNAME" || \
	(hostname -f | grep '\.' || echo 0) >"$QMTPDENV/LOCALNAME"
else
    echo $QMTP_LOCALNAME >"$QMTPDENV/LOCALNAME"
fi
cat >>"$QMTPDENV/LOCALNAME" <<ETX
#
# Set local hostname to keep tcpserver from looking it up in DNS.
# A common choice for localname is 0. To avoid loops, you must use this
# option for servers on TCP port 53.
$PREAMBLE
ETX

# Concurrency
concurrency=$(echo $QMTP_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$QMTPDENV/CONCURRENCY" || \
    cat >"$QMTPDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous qmtp daemon processes.
$PREAMBLE
ETX

# memory limits
limit=$(echo $QMTP_LIMIT | sed -e 's/[^0-9]//g')
test -z "$limit" -o "$limit" -eq 0 && \
    echo -n >"$QMTPDENV/LIMIT" || \
    cat >"$QMTPDENV/LIMIT" <<ETX
$QMTP_LIMIT
#
# memory limit in bytes for daemon
$PREAMBLE
ETX

# Timeouts
timeout=$(echo $QMTP_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$QMTPDENV/TIMEOUT" || \
    cat >"$QMTPDENV/TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $QMTP_SESSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$QMTPDENV/SESSION_TIMEOUT" || \
    cat >"$QMTPDENV/SESSION_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

# TCP rules for relaying
tcprulesdir=$QMTPDDIR/rules
cat >$tcprulesdir/data <<ETX
$PREAMBLE
ETX
ipmeprint | grep -v ^0\.0\.0\.0$ | sed -e 's/$/:allow,RELAYCLIENT=""/g' | sort -u >>$tcprulesdir/data
if test "$SMTPD_LISTEN_REMOTE" == yes; then
    if test -n "$QMTP_RELAYFROMIP" ; then
	echo $QMTP_RELAYFROMIP | \
	    sed 's/[[:space:]]\{1,\}/:allow,RELAYCLIENT=""\n/g' | \
		sort -u \
		>>$tcprulesdir/data
    fi
    test -r "$tcprulesdir/include" && \
	grep ^[0-9] "$tcprulesdir/include" >>$tcprulesdir/data
    echo :allow >>$tcprulesdir/data
else
    echo :deny >>$tcprulesdir/data
fi
( cd $tcprulesdir; tcprules data.cdb data.tmp <data )

# maximum recipients
size=$(echo $QMTP_MAXRCPTS | sed -e 's/[^0-9]//g')
test -z "$size" -o "$size" -eq 0 && \
    echo -n >"$QMTPDENV/MAXRCPTS" || \
    cat >"$QMTPDENV/MAXRCPTS" <<ETX
$size
#
# Maximum number of recipients. If a message exceeds this limit, qmtpd
# returns a permanent error code to the client.
$PREAMBLE
ETX

# message size limits
size=$(echo $QMTP_DATABYTES | sed -e 's/[^0-9]//g')
test -z "$size" -o "$size" -eq 0 && \
    echo -n >"$QMTPDENV/DATABYTES" || \
    cat >"$QMTPDENV/DATABYTES" <<ETX
$size
#
# Maximum number of bytes allowed in a message. If a message exceeds this
# limit, qmtpd returns a permanent error code to the client; in contrast,
# if the disk is full or qmtpd hits a resource limit, qmtpd returns a
# temporary error code. No limit is in effect if this file does not exist.
#
# Counts bytes as stored on disk, not as transmitted through the network.
# It does not count the smtpd Received line, the qmail-queue Received
# line, or the envelope.
$PREAMBLE
ETX

# mailrules
test -z "$QMTP_MAILRULES" && \
echo -n >"$QMTPDENV/MAILRULES" || \
cat >"$QMTPDENV/MAILRULES" <<ETX
$QMTP_MAILRULES
#
# Path to mailrules file. See http://untroubled.org/mailfront/mailrules.html
# for more information on mailrules.
$PREAMBLE
ETX

# patterns
test -z "$QMTP_PATTERNS" && \
echo -n >"$QMTPDENV/PATTERNS" || \
cat >"$QMTPDENV/PATTERNS" <<ETX
$QMTP_PATTERNS
#
# Path to mailfront patterns specification file. See
# http://untroubled.org/mailfront/patterns.html for more information.
$PREAMBLE
ETX

linemax=$(echo $QMTP_PATTERNS_LINEMAX | sed -e 's/[^0-9]//g')
test -z "$linemax" -o "$linemax" -eq 0 && \
    echo -n >"$QMTPDENV/PATTERNS_LINEMAX" || \
    cat >"$QMTPDENV/PATTERNS_LINEMAX" <<ETX
$linemax
#
# Not more than this number of bytes are added to the line buffer before
# the pattern matching is done.
$PREAMBLE
ETX

test -z "$QMTP_PATTERNS_RESP" && \
echo -n >"$QMTPDENV/PATTERNS_RESP" || \
cat >"$QMTPDENV/PATTERNS_RESP" <<ETX
$QMTP_PATTERNS_RESP
#
# Message returned if any pattern matches.
$PREAMBLE
ETX

# recepient lookup
if test "$QMTP_LOOKUP" = "yes" -a -n "$QMTP_CVM_MODE" -a -n "$QMTP_CVM_LOOKUP_LOCATION"
then
    cat >"$QMTPDENV/CVM_LOOKUP" <<ETX
cvm-$QMTP_CVM_MODE:$QMTP_CVM_LOOKUP_LOCATION
#
# CVM mode and module for recipient lookup
$PREAMBLE
ETX

    if test -z "$QMTP_CVM_LOOKUP_SECRET" ; then
	echo -n >"$QMTPDENV/CVM_LOOKUP_SECRET"
    else
	cat >"$QMTPDENV/CVM_LOOKUP_SECRET" <<ETX
$QMTP_CVM_LOOKUP_SECRET
#
# Let CVM encrypt passwords before sending them anywhere.
$PREAMBLE
ETX
    fi
else
    echo -n >"$QMTPDENV/CVM_LOOKUP"
    echo -n >"$QMTPDENV/CVM_LOOKUP_SECRET"
fi
