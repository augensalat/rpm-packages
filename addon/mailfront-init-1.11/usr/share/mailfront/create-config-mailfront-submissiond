#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/mailfront
#
if test ! -f /etc/sysconfig/mailfront ; then
    echo >&2 "No /etc/sysconfig/mailfront found."
    exit 1
fi 
. /etc/sysconfig/mailfront

test "$MAILFRONT_CREATE_CONFIG" = yes || exit 0

# this file contains generic mail setup information
if test -s /etc/sysconfig/mail ; then
    . /etc/sysconfig/mail
    test "$MAIL_CREATE_CONFIG" = yes || exit 0
fi

#
# set qmail config dirs
#
SUBMDDIR="${1:-/etc/mailfront-submissiond}"
SUBMDENV="$SUBMDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on `env LANG=C date`
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/mailfront and restart the server.
#
#"

umask 022

test -z "$SUBMISSION_ADDRESS" -o "$SUBMISSION_ADDRESS" = 0 && \
    echo -n >"$SUBMDENV/ADDRESS" || \
    cat >"$SUBMDENV/ADDRESS" <<ETX
$SUBMISSION_ADDRESS
#
# IP address the SMTP daemon should bind to on this host.
# Default is "0", which means to listen on all addresses of this host.
# IMPORTANT: If you are running SMTP server and SMTP relay on the same host,
#            you must either assign particular IP addresses to each daemon
#            or assign a different port number (e.g. 587) to the relay.
$PREAMBLE
ETX
    
test -z "$SUBMISSION_PORT" -o "$SUBMISSION_PORT" = 0 && \
    echo -n >"$SUBMDENV/PORT" || \
    cat >"$SUBMDENV/PORT" <<ETX
$SUBMISSION_PORT
#
# Port number or name (from /etc/services) for the submission daemon.
$PREAMBLE
ETX

if test -z "$SUBMISSION_LOCALNAME" ; then
    test -s /etc/HOSTNAME && \
	cp /etc/HOSTNAME "$SUBMDENV/LOCALNAME" || \
	(hostname -f | grep '\.' || echo 0) >"$SUBMDENV/LOCALNAME"
else
    echo $SUBMISSION_LOCALNAME >"$SUBMDENV/LOCALNAME"
fi
cat >>"$SUBMDENV/LOCALNAME" <<ETX
#
# Set local hostname to keep tcpserver from looking it up in DNS.
# A common choice for localname is 0. To avoid loops, you must use this
# option for servers on TCP port 53.
$PREAMBLE
ETX

# Concurrency
concurrency=$(echo $SUBMISSION_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$SUBMDENV/CONCURRENCY" || \
    cat >"$SUBMDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous submission daemon processes.
$PREAMBLE
ETX

# memory limits
limit=$(echo $SUBMISSION_LIMIT | sed -e 's/[^0-9]//g')
test -z "$limit" -o "$limit" -eq 0 && \
    echo -n >"$SUBMDENV/LIMIT" || \
    cat >"$SUBMDENV/LIMIT" <<ETX
$limit
#
# memory limit in bytes for daemon
$PREAMBLE
ETX

# Timeouts
timeout=$(echo $SUBMISSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$SUBMDENV/TIMEOUT" || \
    cat >"$SUBMDENV/TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $SUBMISSION_SESSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$SUBMDENV/SESSION_TIMEOUT" || \
    cat >"$SUBMDENV/SESSION_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

# TCP rules
tcprulesdir=$SUBMDDIR/rules
if test -n "$SUBMISSION_ALLOWFROMIP" || grep ^[0-9] "$tcprulesdir/include" &>/dev/null
then
    cat >$tcprulesdir/data <<ETX
$PREAMBLE
ETX
    ipmeprint | sort -u >>$tcprulesdir/data
    echo $SUBMISSION_ALLOWFROMIP | sed 's/[[:space:]]\{1,\}/\n/g' | sort -u \
	>>$tcprulesdir/data
    test -r "$tcprulesdir/include" && \
	grep ^[0-9] "$tcprulesdir/include" >>$tcprulesdir/data
    echo :deny >>$tcprulesdir/data
    ( cd $tcprulesdir; tcprules data.cdb data.tmp <data )
else
    rm -f $tcprulesdir/data $tcprulesdir/data.cdb
fi

# SMTP greeting
test -z "$SUBMISSION_GREETING" && \
    echo -n >"$SUBMDENV/SMTPGREETING" || \
    cat >"$SUBMDENV/SMTPGREETING" <<ETX
$SUBMISSION_GREETING
#
# SMTP greeting string
$PREAMBLE
ETX

# message size limits
size=$(echo $SMTP_DATABYTES | sed -e 's/[^0-9]//g')
test -z "$size" -o "$size" -eq 0 && \
    echo -n >"$SUBMDENV/DATABYTES" || \
    cat >"$SUBMDENV/DATABYTES" <<ETX
$size
#
# Maximum number of bytes allowed in a message. If a message exceeds this
# limit, smtpd returns a permanent error code to the client; in contrast,
# if the disk is full or smtpd hits a resource limit, smtpd returns a
# temporary error code. No limit is in effect if this file does not exist.

# Counts bytes as stored on disk, not as transmitted through the network.
# It does not count the smtpd Received line, the qmail-queue Received
# line, or the envelope.
$PREAMBLE
ETX

# max number of bogus SMTP commands
maxnotimpl=$(echo $SUBMISSION_MAXNOTIMPL | sed -e 's/[^0-9]//g')
test -z "$maxnotimpl" -o "$maxnotimpl" -eq 0 && \
    echo -n >"$SUBMDENV/MAXNOTIMPL" || \
    cat >"$SUBMDENV/MAXNOTIMPL" <<ETX
$maxnotimpl
#
# Clients are disconnected if they send more than the specified number
# of commands that result in a "500 Not implemented." error.
$PREAMBLE
ETX

# authentication
cat >"$SUBMDENV/CVM_SASL_PLAIN" <<ETX
cvm-${SUBMISSION_CVM_MODE:-command}:${SUBMISSION_CVM_LOCATION:-cvm-unix}
#
# CVM mode and module for SMTP AUTH
$PREAMBLE
ETX
cp "$SUBMDENV/CVM_SASL_PLAIN" "$SUBMDENV/CVM_SASL_LOGIN"
