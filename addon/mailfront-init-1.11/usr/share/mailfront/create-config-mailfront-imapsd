#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#

if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/mailfront
#
if test ! -f /etc/sysconfig/mailfront ; then
    echo >&2 "No /etc/sysconfig/mailfront found."
    exit 1
fi 
. /etc/sysconfig/mailfront

test "$MAILFRONT_CREATE_CONFIG" = yes || exit 0

# this file contains generic mail setup information
if test -s /etc/sysconfig/mail ; then
    . /etc/sysconfig/mail
    test "$MAIL_CREATE_CONFIG" = yes || exit 0
fi

#
# set qmail config dirs
#
IMAPSDDIR="${1:-/etc/mailfront-imapsd}"
IMAPSDENV="$IMAPSDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on $(env LANG=C date)
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/mailfront and restart the server.
#
#"

umask 022

test -z "$IMAPS_ADDRESS" -o "$IMAPS_ADDRESS" = 0 && \
    echo -n >"$IMAPSDENV/ADDRESS" || \
    cat >"$IMAPSDENV/ADDRESS" <<ETX
$IMAPS_ADDRESS
#
# IP address the IMAP daemon should bind to on this host.
# Default is "0", which means to listen on all addresses of this host.
$PREAMBLE
ETX
    
test -z "$IMAPS_PORT" -o "$IMAPS_PORT" -eq 0 && \
    echo -n >"$IMAPSDENV/PORT" || \
    cat >"$IMAPSDENV/PORT" <<ETX
$IMAPS_PORT
#
# Port number or name (from /etc/services) for the imap daemon.
$PREAMBLE
ETX

if test -z "$IMAPS_LOCALNAME" ; then
    test -s /etc/HOSTNAME && \
	cp /etc/HOSTNAME "$IMAPSDENV/LOCALNAME" || \
	(hostname -f | grep '\.' || echo 0) >"$IMAPSDENV/LOCALNAME"
else
    echo $IMAPS_LOCALNAME >"$IMAPSDENV/LOCALNAME"
fi
cat >>"$IMAPSDENV/LOCALNAME" <<ETX
#
# Set local hostname to keep tcpserver from looking it up in DNS.
# A common choice for localname is 0. To avoid loops, you must use this
# option for servers on TCP port 53.
$PREAMBLE
ETX

# concurrency
concurrency=$(echo $IMAPS_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$IMAPSDENV/CONCURRENCY" || \
    cat >"$IMAPSDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous imap daemon processes.
$PREAMBLE
ETX

# memory limits
limit=$(echo $IMAPS_LIMIT | sed -e 's/[^0-9]//g')
test -z "$limit" -o "$limit" -eq 0 && \
    echo -n >"$IMAPSDENV/LIMIT" || \
    cat >"$IMAPSDENV/LIMIT" <<ETX
$IMAPS_LIMIT
#
# memory limit in bytes for daemon
$PREAMBLE
ETX

function ssl_config() {
    test -s "$1" -a -s "$2" && return 0
    test -x /usr/bin/openssl || return 1
    test -s "$IMAPSDDIR/ssl/openssl.cnf" || return 1

    oldmask=$(umask)
    umask 027

    /bin/dd if=/dev/urandom of="$IMAPSDDIR/ssl/openssl.rand" count=1 2>/dev/null
    /usr/bin/openssl req -newkey rsa:1024 -x509 -days 1461 -nodes \
	-config "$IMAPSDDIR/ssl/openssl.cnf" -rand "$IMAPSDDIR/ssl/openssl.rand" \
	-out "$1" -keyout "$2" && \
    /usr/bin/openssl x509 -subject -dates -fingerprint -noout -in "$1" && \
    /bin/chmod 0644 "$1" && \
    /bin/chown root:nogroup "$2" || \
    /bin/rm -f "$1" "$2" "$IMAPSDDIR/ssl/openssl.rand"

    test -s "$1" -a -n "$3" && \
	/usr/bin/openssl gendh -rand "$IMAPSDDIR/ssl/openssl.rand" -out "$3" 1024

    umask $oldmask
    /bin/rm -f "$IMAPSDDIR/ssl/openssl.rand"

    test -s "$1"
}

# SSL certificate and private key
: ${IMAPS_CERTFILE:=$IMAPSDDIR/ssl/certificate.pem}
: ${IMAPS_KEYFILE:=$IMAPSDDIR/ssl/privatekey.pem}

if ssl_config "$IMAPS_CERTFILE" "$IMAPS_KEYFILE" "$IMAPS_DHFILE"
then
    cat >"$IMAPSDENV/CERTFILE" <<ETX
$IMAPS_CERTFILE
#
# Path to SSL certificate
$PREAMBLE
ETX

    cat >"$IMAPSDENV/KEYFILE" <<ETX
$IMAPS_KEYFILE
#
# Path to SSL private key
$PREAMBLE
ETX

    test ! -s "$IMAPS_DHFILE" && \
	echo -n >"$IMAPSDENV/DHFILE" || \
	cat >"$IMAPSDENV/DHFILE" <<ETX
$IMAPS_DHFILE
#
# Path to Diffie-Hellmann-Parameter file
$PREAMBLE
ETX
else
    echo -n >"$IMAPSDENV/CERTFILE"
    echo -n >"$IMAPSDENV/KEYFILE"
    echo -n >"$IMAPSDENV/DHFILE"
fi

# Timeouts
timeout=$(echo $IMAPS_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$IMAPSDENV/AUTH_TIMEOUT" || \
    cat >"$IMAPSDENV/AUTH_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $IMAPS_SESSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$IMAPSDENV/AUTH_SESSION_TIMEOUT" || \
    cat >"$IMAPSDENV/AUTH_SESSION_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

# TCP rules
tcprulesdir=$IMAPSDIR/rules
if test -n "$IMAPS_ALLOWFROMIP" || grep ^[0-9] "$tcprulesdir/include" &>/dev/null
then
    cat >$tcprulesdir/data <<ETX
$PREAMBLE
ETX
    ipmeprint | sort -u >>$tcprulesdir/data
    echo $IMAPS_ALLOWFROMIP | sed 's/[[:space:]]\{1,\}/\n/g' | sort -u \
	>>$tcprulesdir/data
    test -r "$tcprulesdir/include" && \
	grep ^[0-9] "$tcprulesdir/include" >>$tcprulesdir/data
    echo :deny >>$tcprulesdir/data
    ( cd $tcprulesdir; tcprules data.cdb data.tmp <data )
else
    rm -f $tcprulesdir/data $tcprulesdir/data.cdb
fi

# authentication
cat >"$IMAPSDENV/CVM_SASL_PLAIN" <<ETX
cvm-${IMAPS_CVM_MODE:-command}:${IMAPS_CVM_LOCATION:-cvm-unix}
#
# CVM mode and module for IMAP authentication
$PREAMBLE
ETX
cp "$IMAPSDENV/CVM_SASL_PLAIN" "$IMAPSDENV/CVM_SASL_LOGIN"

# CAPABILITY of imapd
cat >"$IMAPSDENV/IMAP_CAPABILITY" <<ETX
${IMAPS_CAPABILITY:-IMAP4rev1 CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA AUTH=PLAIN}
#
# IMAPS_CAPABILITY specifies what most of the response should be to the
# CAPABILITY command.
$PREAMBLE
ETX

# 
test "$IMAPS_KEYWORDS" = no && switch=0 || switch=1
cat >"$IMAPSDENV/IMAP_KEYWORDS" <<ETX
$switch
#
# IMAPS_KEYWORDS="1" enables custom IMAP keywords.
# Set this option to "0" to disable custom keywords.
$PREAMBLE
ETX

# 
test "$IMAPS_ACL" = no && switch=0 || switch=1
cat >"$IMAPSDENV/IMAP_ACL" <<ETX
$switch
#
# IMAPS_KEYWORDS="1" enables custom IMAP keywords.
# Set this option to "0" to disable custom keywords.
$PREAMBLE
ETX

#
timeout=$(echo $IMAPS_IDLE_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$IMAPSDENV/IMAP_IDLE_TIMEOUT" || \
    cat >"$IMAPSDENV/IMAP_IDLE_TIMEOUT" <<ETX
$timeout
#
# If you want to try out the IDLE extension, this setting controls how often
# the server polls for changes to the folder, in IDLE mode (in seconds).
$PREAMBLE
ETX

# 
test "$IMAPS_DISABLETHREADSORT" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_DISABLETHREADSORT" <<ETX
$switch
#
# Set IMAPS_DISABLETHREADSORT to disable the THREAD and SORT commands -
# server side sorting and threading.
#
# Those capabilities will still be advertised, but the server will reject
# them.  Set this option if you want to disable all the extra load from
# server-side threading and sorting.  Not advertising those capabilities
# will simply result in the clients reading the entire folder, and sorting
# it on the client side.  That will still put some load on the server.
# advertising these capabilities, but rejecting the commands, will stop this
# silliness.
$PREAMBLE
ETX

# 
test "$IMAPS_CHECK_ALL_FOLDERS" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_CHECK_ALL_FOLDERS" <<ETX
$switch
#
# Set IMAPS_CHECK_ALL_FOLDERS to 1 if you want the server to check for new
# mail in every folder.  Not all IMAP clients use the IMAP's new mail
# indicator, but some do.  Normally new mail is checked only in INBOX,
# because it is a comparatively time consuming operation, and it would be
# a complete waste of time unless mail filters are used to deliver
# mail directly to folders.
#
# When IMAP clients are used which support new mail indication, and when
# mail filters are used to sort incoming mail into folders, setting
# IMAPS_CHECK_ALL_FOLDERS to 1 will allow IMAP clients to announce new
# mail in folders.  Note that this will result in slightly more load on the
# server.
$PREAMBLE
ETX

# 
test "$IMAPS_OBSOLETE_CLIENT" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_OBSOLETE_CLIENT" <<ETX
$switch
#
# Set IMAPS_OBSOLETE_CLIENT if your IMAP client expects \\NoInferiors to mean
# what \\HasNoChildren really means.
$PREAMBLE
ETX

# 
test "$IMAPS_USELOCKS" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_USELOCKS" <<ETX
$switch
#
# Set IMAPS_USELOCKS to 1 if you experience weird problems when using IMAP
# clients that open multiple connections to the server.  I would hope that
# most IMAP clients are sane enough not to issue commands to multiple IMAP
# channels which conflict with each other.
$PREAMBLE
ETX

test "$IMAPS_ENHANCEDIDLE" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_ENHANCEDIDLE" <<ETX
$switch
#
# If Courier was compiled with the File Alteration Monitor, setting
# IMAPS_ENHANCEDIDLE to 1 enables enhanced IDLE mode, where multiple
# clients may open the same folder concurrently, and receive updates to
# folder contents in realtime.  See the imapd(8) man page for additional
# information.
#
# IMPORTANT: IMAPS_USELOCKS *MUST* also be set to 1, and IDLE must be included
# in the IMAPS_CAPABILITY list.
$PREAMBLE
ETX

test -z "$IMAPS_TRASHFOLDERNAME" && \
    echo -n >"$IMAPSDENV/IMAP_TRASHFOLDERNAME" || \
    cat >"$IMAPSDENV/IMAP_TRASHFOLDERNAME" <<ETX
$IMAPS_TRASHFOLDERNAME
#
# The name of the magic trash Folder.  For MSOE compatibility,
# you can set IMAPS_TRASHFOLDERNAME="Deleted Items".
#
# IMPORTANT:  If you change this, you must also change IMAPS_EMPTYTRASH
$PREAMBLE
ETX

test -z "$IMAPS_EMPTYTRASH" && \
    echo -n >"$IMAPSDENV/IMAP_EMPTYTRASH" || \
    cat >"$IMAPSDENV/IMAP_EMPTYTRASH" <<ETX
$IMAPS_EMPTYTRASH
#
# This setting is optional, and causes messages from the given folder to
# be automatically deleted after the given number of days.
# IMAPS_EMPTYTRASH is a comma-separated list of folder:days.  The default
# setting, above, purges 7 day old messages from the Trash folder.
# Another useful setting would be:
#
# IMAPS_EMPTYTRASH=Trash:7,Sent:30
#
# This would also delete messages from the Sent folder (presumably copies
# of sent mail) after 30 days.  This is a global setting that is applied to
# every mail account, and is probably useful in a controlled, corporate
# environment.
#
# Important: the purging is controlled by CTIME, not MTIME (the file time
# as shown by ls).  It is perfectly ordinary to see stuff in Trash that's
# a year old.  That's the file modification time, MTIME, that's displayed.
# This is generally when the message was originally delivered to this
# mailbox.  Purging is controlled by a different timestamp, CTIME, which is
# changed when the file is moved to the Trash folder (and at other times too).
#
# You might want to disable this setting in certain situations - it results
# in a stat() of every file in each folder, at login and logout.
$PREAMBLE
ETX

test "$IMAPS_MOVE_EXPUNGE_TO_TRASH" = yes && switch=1 || switch=0
cat >"$IMAPSDENV/IMAP_MOVE_EXPUNGE_TO_TRASH" <<ETX
$switch
#
# Set IMAPS_MOVE_EXPUNGE_TO_TRASH to move expunged messages to Trash.  This
# effectively allows an undo of message deletion by fishing the deleted
# mail from trash.  Trash can be manually expunged as usually, and mail
# will get automatically expunged from Trash according to IMAPS_EMPTYTRASH.
#
# NOTE: shared folders are still expunged as usual.  Shared folders are
# not affected.
$PREAMBLE
ETX

if test "$IMAPS_OUTBOX_ENHANCEMENT" = yes ; then
    cat >"$IMAPSDENV/SENDMAIL" <<ETX
/usr/sbin/sendmail
#
# If OUTBOX is defined, mail can be sent via the IMAP connection by copying
# a message to the INBOX.Outbox folder.  For all practical matters,
# INBOX.Outbox looks and behaves just like any other IMAP folder.  If this
# folder doesn't exist it must be created by the IMAP mail client, just
# like any other IMAP folder.  The kicker: any message copied or moved to
# this folder is will be E-mailed by the Courier-IMAP server, by running
# the SENDMAIL program.  Therefore, messages copied or moved to this
# folder must be well-formed RFC-2822 messages, with the recipient list
# specified in the To:, Cc:, and Bcc: headers.  Courier-IMAP relies on
# SENDMAIL to read the recipient list from these headers (and delete the Bcc:
# header) by running the command "$SENDMAIL -oi -t -f $SENDER", with the
# message piped on standard input.  $SENDER will be the return address
# of the message, which is set by the authentication module.
$PREAMBLE
ETX

    cat >"$IMAPSDENV/OUTBOX" <<ETX
${IMAPS_OUTBOX_NAME:-.Outbox}
#
# Name the special folder, named INBOX.Outbox
$PREAMBLE
ETX

    test -z "$IMAPS_HEADERFROM" && \
	echo -n >"$IMAPSDENV/HEADERFROM" || \
	cat >"$IMAPSDENV/HEADERFROM" <<ETX
$IMAPS_HEADERFROM
#
# For administrative and oversight purposes, the return address, $SENDER
# will also be saved in the X-IMAP-Sender mail header.  This header gets
# added to the sent E-mail (but it doesn't get saved in the copy of the
# message that's saved in the folder)
$PREAMBLE
ETX

    test "$IMAPS_OUTBOX_MULTIPLE_SEND" = yes && switch=1 || switch=0
    cat >"$IMAPSDENV/OUTBOX_MULTIPLE_SEND" <<ETX
$switch
#
# If set allow a COPY of more than one message to the Outbox, at a time.
$PREAMBLE
ETX

else
    echo -n >"$IMAPSDENV/OUTBOX"
    echo -n >"$IMAPSDENV/HEADERFROM"
    echo -n >"$IMAPSDENV/OUTBOX_MULTIPLE_SEND"
fi
