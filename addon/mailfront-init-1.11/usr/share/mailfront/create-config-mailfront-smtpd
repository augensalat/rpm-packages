#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/mailfront
#
if test ! -f /etc/sysconfig/mailfront ; then
    echo >&2 "No /etc/sysconfig/mailfront found."
    exit 1
fi 
. /etc/sysconfig/mailfront

test "$MAILFRONT_CREATE_CONFIG" = yes || exit 0

# this file contains generic mail setup information
if test -s /etc/sysconfig/mail ; then
    . /etc/sysconfig/mail
    test "$MAIL_CREATE_CONFIG" = yes || exit 0
fi

#
# set qmail config dirs
#
SMTPDDIR="${1:-/etc/mailfront-smtpd}"
SMTPDENV="$SMTPDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on $(env LANG=C date)
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/mailfront and restart the server.
#
#"

umask 022

test -z "$SMTP_ADDRESS" -o "$SMTP_ADDRESS" = 0 && \
    echo -n >"$SMTPDENV/ADDRESS" || \
    cat >"$SMTPDENV/ADDRESS" <<ETX
$SMTP_ADDRESS
#
# IP address the SMTP daemon should bind to on this host.
# Default is "0", which means to listen on all addresses of this host.
$PREAMBLE
ETX
    
test -z "$SMTP_PORT" -o "$SMTP_PORT" = 0 && \
    echo -n >"$SMTPDENV/PORT" || \
    cat >"$SMTPDENV/PORT" <<ETX
$SMTP_PORT
#
# Port number or name (from /etc/services) for the smtp daemon.
$PREAMBLE
ETX

if test -z "$SMTP_LOCALNAME" ; then
    test -s /etc/HOSTNAME && \
	cp /etc/HOSTNAME "$SMTPDENV/LOCALNAME" || \
	(hostname -f | tr A-Z a-z | grep '\.' || echo 0) >"$SMTPDENV/LOCALNAME"
else
    echo $SMTP_LOCALNAME >"$SMTPDENV/LOCALNAME"
fi
cat >>"$SMTPDENV/LOCALNAME" <<ETX
#
# Set local hostname to keep tcpserver from looking it up in DNS.
# A common choice for localname is 0. To avoid loops, you must use this
# option for servers on TCP port 53.
$PREAMBLE
ETX

# Concurrency
concurrency=$(echo $SMTP_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$SMTPDENV/CONCURRENCY" || \
    cat >"$SMTPDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous smtp daemon processes.
$PREAMBLE
ETX

# memory limits
limit=$(echo $SMTP_LIMIT | sed -e 's/[^0-9]//g')
test -z "$limit" -o "$limit" -eq 0 && \
    echo -n >"$SMTPDENV/LIMIT" || \
    cat >"$SMTPDENV/LIMIT" <<ETX
$limit
#
# memory limit in bytes for daemon
$PREAMBLE
ETX

# Timeouts
timeout=$(echo $SMTP_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$SMTPDENV/TIMEOUT" || \
    cat >"$SMTPDENV/TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $SMTP_SESSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$SMTPDENV/SESSION_TIMEOUT" || \
    cat >"$SMTPDENV/SESSION_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

# SMTP greeting
test -z "$SMTP_GREETING" && \
    echo -n >"$SMTPDENV/SMTPGREETING" || \
    cat >"$SMTPDENV/SMTPGREETING" <<ETX
$SMTP_GREETING
#
# SMTP greeting string
$PREAMBLE
ETX

# maximum recipients
size=$(echo $SMTP_MAXRCPTS | sed -e 's/[^0-9]//g')
test -z "$size" -o "$size" -eq 0 && \
    echo -n >"$SMTPDENV/MAXRCPTS" || \
    cat >"$SMTPDENV/MAXRCPTS" <<ETX
$size
#
# Maximum number of recipients. If a message exceeds this limit, smtpd
# returns a permanent error code to the client.
$PREAMBLE
ETX

# message size limits
size=$(echo $SMTP_DATABYTES | sed -e 's/[^0-9]//g')
test -z "$size" -o "$size" -eq 0 && \
    echo -n >"$SMTPDENV/DATABYTES" || \
    cat >"$SMTPDENV/DATABYTES" <<ETX
$size
#
# Maximum number of bytes allowed in a message. If a message exceeds this
# limit, smtpd returns a permanent error code to the client; in contrast,
# if the disk is full or smtpd hits a resource limit, smtpd returns a
# temporary error code. No limit is in effect if this file does not exist.
#
# Counts bytes as stored on disk, not as transmitted through the network.
# It does not count the smtpd Received line, the qmail-queue Received
# line, or the envelope.
$PREAMBLE
ETX

# max number of bogus SMTP commands
maxnotimpl=$(echo $SMTP_MAXNOTIMPL | sed -e 's/[^0-9]//g')
test -z "$maxnotimpl" -o "$maxnotimpl" -eq 0 && \
    echo -n >"$SMTPDENV/MAXNOTIMPL" || \
    cat >"$SMTPDENV/MAXNOTIMPL" <<ETX
$maxnotimpl
#
# Clients are disconnected if they send more than the specified number
# of commands that result in a "500 Not implemented." error.
$PREAMBLE
ETX

# mailrules
test -z "$SMTP_MAILRULES" && \
echo -n >"$SMTPDENV/MAILRULES" || \
cat >"$SMTPDENV/MAILRULES" <<ETX
$SMTP_MAILRULES
#
# Path to mailrules file. See http://untroubled.org/mailfront/mailrules.html
# for more information on mailrules.
$PREAMBLE
ETX

# patterns
test -z "$SMTP_PATTERNS" && \
echo -n >"$SMTPDENV/PATTERNS" || \
cat >"$SMTPDENV/PATTERNS" <<ETX
$SMTP_PATTERNS
#
# Path to mailfront patterns specification file. See
# http://untroubled.org/mailfront/patterns.html for more information.
$PREAMBLE
ETX

linemax=$(echo $SMTP_PATTERNS_LINEMAX | sed -e 's/[^0-9]//g')
test -z "$linemax" -o "$linemax" -eq 0 && \
    echo -n >"$SMTPDENV/PATTERNS_LINEMAX" || \
    cat >"$SMTPDENV/PATTERNS_LINEMAX" <<ETX
$linemax
#
# Not more than this number of bytes are added to the line buffer before
# the pattern matching is done.
$PREAMBLE
ETX

test -z "$SMTP_PATTERNS_RESP" && \
echo -n >"$SMTPDENV/PATTERNS_RESP" || \
cat >"$SMTPDENV/PATTERNS_RESP" <<ETX
$SMTP_PATTERNS_RESP
#
# Message returned if any pattern matches.
$PREAMBLE
ETX

# recepient lookup
if test "$SMTP_LOOKUP" = yes -a -n "$SMTP_CVM_MODE" -a -n "$SMTP_CVM_LOOKUP_LOCATION"
then
    cat >"$SMTPDENV/CVM_LOOKUP" <<ETX
cvm-$SMTP_CVM_MODE:$SMTP_CVM_LOOKUP_LOCATION
#
# CVM mode and module for recipient lookup
$PREAMBLE
ETX

    if test -z "$SMTP_CVM_LOOKUP_SECRET" ; then
	echo -n >"$SMTPDENV/CVM_LOOKUP_SECRET"
    else
	cat >"$SMTPDENV/CVM_LOOKUP_SECRET" <<ETX
$SMTP_CVM_LOOKUP_SECRET
#
# Let CVM encrypt passwords before sending them anywhere.
$PREAMBLE
ETX
    fi
else
    echo -n >"$SMTPDENV/CVM_LOOKUP"
    echo -n >"$SMTPDENV/CVM_LOOKUP_SECRET"
fi

# policyd plugin
if test -n "$SMTP_POLICYD_MODE" -a -n "$SMTP_POLICYD_LOCATION"
then
    cat >"$SMTPDENV/POLICYD_LOOKUP" <<ETX
$SMTP_POLICYD_MODE:$SMTP_POLICYD_LOCATION
#
# POLICYD connection mode and address
$PREAMBLE
ETX

    if test "$SMTP_POLICYD_FAILSAFE" = yes ; then
	echo -n >"$SMTPDENV/POLICYD_FAILSAFE"
    else
	cat >"$SMTPDENV/POLICYD_FAILSAFE" <<ETX
1
#
# Silently skip policy check if policy daemon is unavailable
$PREAMBLE
ETX
    fi
else
    echo -n >"$SMTPDENV/POLICYD_LOOKUP"
    echo -n >"$SMTPDENV/POLICYD_FAILSAFE"
fi

# RBLs
test -z "$SMTP_RBLHOSTS" && \
echo -n >"$SMTPDENV/RBLHOSTS" || \
cat >"$SMTPDENV/RBLHOSTS" <<ETX
$SMTP_RBLHOSTS
#
# List of domains that blacklist client IP addresses.
$PREAMBLE
ETX

test -z "$SMTP_ANTIRBLHOSTS" && \
echo -n >"$SMTPDENV/ANTIRBLHOSTS" || \
cat >"$SMTPDENV/ANTIRBLHOSTS" <<ETX
$SMTP_ANTIRBLHOSTS
#
# List of domains for which to disable RBL testing.
$PREAMBLE
ETX

# RBL timeout
timeout=$(echo $SMTP_RBLTIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$size" -eq 0 && \
echo -n >"$SMTPDENV/RBLTIMEOUT" || \
cat >"$SMTPDENV/RBLTIMEOUT" <<ETX
$timeout
#
# Timeout in seconds for rblsmtpd
$PREAMBLE
ETX

# TCP rules for relaying
tcprulesdir=$SMTPDDIR/rules
cat >$tcprulesdir/data <<ETX
$PREAMBLE
ETX
ipmeprint | sed -e 's/$/:allow,RELAYCLIENT=""/g' | sort -u >>$tcprulesdir/data
if test "$SMTPD_LISTEN_REMOTE" == yes; then
    if test -n "$SMTP_RELAYFROMIP" ; then
	echo $SMTP_RELAYFROMIP | \
	    sed -e 's/[[:space:]]\{1,\}/:allow,RELAYCLIENT=""\n/g' | \
		sort -u \
		>>$tcprulesdir/data
    fi
    test -r "$tcprulesdir/include" && \
	grep ^[0-9] "$tcprulesdir/include" >>$tcprulesdir/data
    echo :allow >>$tcprulesdir/data
else
    echo :deny >>$tcprulesdir/data
fi
( cd $tcprulesdir; tcprules data.cdb data.tmp <data )

