#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/twoftpd
#
if test ! -f /etc/sysconfig/twoftpd ; then
    echo >&2 "No /etc/sysconfig/twoftpd found."
    exit 1
fi
. /etc/sysconfig/twoftpd

test "$TWOFTPD_CREATE_CONFIG" = yes || exit 0

#
# set twoftpd config dirs
#
TWOFTPDDIR="${1:-/etc/twoftpd}"
TWOFTPDENV="$TWOFTPDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on $(env LANG=C date)
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/twoftpd and restart the server.
#
#"

umask 022

# IP address
test -z "$TWOFTPD_ADDRESS" -o "$TWOFTPD_ADDRESS" = 0 && \
    echo -n >"$TWOFTPDENV/ADDRESS" || \
    cat >"$TWOFTPDENV/ADDRESS" <<ETX
$TWOFTPD_ADDRESS
#
# IP address the FTP daemon should bind to.
# Default is "0", which means to listen on all addresses of this host.
$PREAMBLE
ETX

# Port
test -z "$TWOFTPD_PORT" -o "$TWOFTPD_PORT" = 0 && \
    echo -n >"$TWOFTPDENV/PORT" || \
    cat >"$TWOFTPDENV/PORT" <<ETX
$TWOFTPD_PORT
#
# Port number or name (from /etc/services) for the FTP daemon.
$PREAMBLE
ETX

# Concurrency
concurrency=$(echo $TWOFTPD_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$TWOFTPDENV/CONCURRENCY" || \
    cat >"$TWOFTPDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous FTP daemon processes.
$PREAMBLE
ETX

# Memory limits
softlimit=$(echo $TWOFTPD_LIMIT | sed -e 's/[^0-9]//g')
test -z "$softlimit" && \
    rm -f "$TWOFTPDENV/TWOFTPD_LIMIT" || \
    cat >"$TWOFTPDENV/TWOFTPD_LIMIT" <<ETX
$softlimit
#
# Limit data and stack segment, locked physical pages and total of all
# segments per process to n bytes each.
#
$PREAMBLE
ETX
 
test "$TWOFTPD_CHROOT" != yes && \
    echo -n >"$TWOFTPDENV/CHROOT" || \
    cat >"$TWOFTPDENV/CHROOT" <<ETX
1
#
# Chroot to authenticated FTP directory.
# Do not disable unless you really know what you do!
$PREAMBLE
ETX

# Timeouts
timeout=$(echo $TWOFTPD_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$TWOFTPDENV/TIMEOUT" || \
    cat >"$TWOFTPDENV/TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $TWOFTPD_SESSION_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    echo -n >"$TWOFTPDENV/SESSION_TIMEOUT" || \
    cat >"$TWOFTPDENV/SESSION_TIMEOUT" <<ETX
$timeout
#
# Times out connections after value seconds of inactivity.
$PREAMBLE
ETX

timeout=$(echo $TWOFTPD_AUTH_TIMEOUT | sed -e 's/[^0-9]//g')
test -z "$timeout" -o "$timeout" -eq 0 && \
    rm -f "$TWOFTPDENV/AUTH_TIMEOUT" || \
    cat >"$TWOFTPDENV/AUTH_TIMEOUT" <<ETX
$timeout
#
# timeout in secconds in authentication phase
$PREAMBLE
ETX

# log verbosity
test "$TWOFTPD_LOGREQUESTS" != yes && \
    echo -n >"$TWOFTPDENV/LOGREQUESTS" || \
    cat >"$TWOFTPDENV/LOGREQUESTS" <<ETX
1
#
# Log all client requests
$PREAMBLE
ETX

est "$TWOFTPD_LOGRESPONSES" != yes && \
    echo -n "$TWOFTPDENV/LOGRESPONSES" || \
    cat >"$TWOFTPDENV/LOGRESPONSES" <<ETX
1
#
# Log all server responses
$PREAMBLE
ETX

test "$TWOFTPD_NODOTFILES" != yes && \
    echo -n "$TWOFTPDENV/NODOTFILES" || \
    cat >"$TWOFTPDENV/NODOTFILES" <<ETX
1
#
# Don't show dot files if this is set
$PREAMBLE
ETX

test -z "$TWOFTPD_CVM_MODE" && TWOFTPD_CVM_MODE="command"
test -z "$TWOFTPD_CVM_LOCATION" && TWOFTPD_CVM_LOCATION="cvm-unix"
    cat >"$TWOFTPDENV/CVM_AUTH" <<ETX
cvm-$TWOFTPD_CVM_MODE:$TWOFTPD_CVM_LOCATION
#
# CVM mode and module for authentication
$PREAMBLE
ETX

# Configuration Variables for CVM
for n in $TWOFTPD_CVM_ENVIRONMENT ; do
    filename=`echo $n | cut -d '=' -f1`
    eval $n
    cat <<ETX >$TWOFTPDENV/$filename
${!filename}
#
# CVM command environment variable
$PREAMBLE
ETX
done

