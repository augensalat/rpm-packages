#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/lighttpd
#
test -f /etc/sysconfig/lighttpd || {
    echo "No /etc/sysconfig/lighttpd found."
    exit 1
}
. /etc/sysconfig/lighttpd

test "$ENABLE_AUTOCONFIG_LIGHTTPD" = yes || exit 0

#
# set lighttpd config dirs
#
LIGHTTPDDIR="/etc/lighttpd"
LIGHTTPDENV="$LIGHTTPDDIR/env"

: ${LIGHTTPD_CONF:=${LIGHTTPDDIR}/lighttpd.conf}

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on `env LANG=C date`
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/lighttpd and restart the server.
#
#"

umask 022

cat >$LIGHTTPDENV/CONF <<ETX
$LIGHTTPD_CONF
#
# Path to lighttpd's main config file.
$PREAMBLE
ETX

limit="`echo $LIGHTTPD_LIMIT | sed -e 's/[^0-9]//g'`"
test -z "$limit" && \
    echo -n >$LIGHTTPDENV/LIMIT || \
    cat >$LIGHTTPDENV/LIMIT <<ETX
$limit
#
# LIGHTTPD_LIMIT sets the maximum size of the data segment of the server
# process.  The value of LIGHTTPD_LIMIT is simply passed to the "softlimit -d"
# command, which sets the upper limit on the size of the data segment of
# the server process, in bytes.  The default value of 50000000 sets a very
# generous limit, which should be more than plenty for anyone.
#
# This feature is used as an additional safety check that should stop
# any potential denial-of-service attacks that exploit any kind of
# a memory leak to exhaust all the available memory on the server.
$PREAMBLE
ETX

# create a temporary output file
#
TMPDIR='' TMPFILE=`mktemp -p "$(dirname $LIGHTTPD_CONF)"` || exit 1

cat <<ETX >"$TMPFILE"
#######################################################################
##
## lighttpd.conf
##
#######################################################################
$PREAMBLE
#######################################################################
##
## This is the server's basic setup.
## Check ###CONFDIR###/*.conf for the configuration of modules.
##
## If you really need to alter this config file directly then first set
## 
##   ENABLE_AUTOCONFIG_LIGHTTPD="no"
##
## in /etc/syscconfig/lighttpd to disable auto-generation of this file.
##

#######################################################################
##
## Some Variable definition which will make chrooting easier.
##
## if you add a variable here. Add the corresponding variable in the
## chroot example aswell.
##
var.log_root    = "/var/log/www"
var.server_root = "/srv/www"
var.state_dir   = "/var/run"
var.home_dir    = "/var/lib/lighttpd"
var.conf_dir    = "/etc/lighttpd"

## 
## run the server chrooted.
## 
## This requires root permissions during startup.
##
## If you run Chrooted set the the variables to directories relative to
## the chroot dir.
##
## example chroot configuration:
## 
#var.log_root    = "/logs"
#var.server_root = "/"
#var.state_dir   = "/run"
#var.home_dir    = "/lib/lighttpd"
#var.vhosts_dir  = "/vhosts"
#var.conf_dir    = "/etc"
#
#server.chroot   = "/srv/www"

##
## Some additional variables to make the configuration easier
##

##
## Base directory for all virtual hosts
##
## used in:
## conf.d/evhost.conf
## conf.d/simple_vhost.conf
## vhosts.d/vhosts.template
##
var.vhosts_dir  = server_root + "/vhosts"

##
## Cache for mod_compress
##
## used in:
## conf.d/compress.conf
##
var.cache_dir   = "/var/cache/lighttpd"

##
## Base directory for sockets.
##
## used in:
## conf.d/fastcgi.conf
## conf.d/scgi.conf
##
var.socket_dir  = home_dir + "/sockets"

#######################################################################
##
## where to put the superfluous pid file
##
server.pid-file = state_dir + "/lighttpd.pid"

##
## where to send error-messages to
##
#server.errorlog = "/var/log/www/logs/lighttpd.error.log"
ETX

# load modules
cat <<ETX >>"$TMPFILE"

##
## modules to load
## at least mod_access and mod_accesslog should be loaded
## all other module should only be loaded if really neccesary
## - saves some time
## - saves memory
##
server.modules = (
ETX

if test -z "$LIGHTTPD_MODULES"; then
    echo -e "  \"mod_access\",\n  \"mod_accesslog\"" >>"$TMPFILE"
    LIGHTTPD_CONFIGS="accesslog"
else
    for mod in $LIGHTTPD_MODULES ; do
	if test -x "###LIBDIR###/$mod.so" ; then
	    echo "  \"$mod\"," >>"$TMPFILE"
	fi
    done

    LIGHTTPD_CONFIGS=$(
	for mod in $LIGHTTPD_MODULES; do
	    echo $mod | {
		IFS='_' read void name
		if test -f "###CONFDIR###/$name.conf" ; then
		    echo -n " $name"
		fi
	    }
	done
    )

fi
echo ")" >>"$TMPFILE"

# IPv6
# set LIGHTTPD_USE_IPV6=no if no IPv6 support is compiled into lighttpd
if test $(lighttpd -V | grep -i 'ipv6' | cut -c 2) = '-' ; then
    LIGHTTPD_USE_IPV6=no
    export LIGHTTPD_USE_IPV6
fi
echo -e "\n##\n## use IPv6?\n##" >>"$TMPFILE"
test "$LIGHTTPD_USE_IPV6" = "yes" && \
    echo 'server.use-ipv6 = "enable"' >>"$TMPFILE" || \
    echo 'server.use-ipv6 = "disable"' >>"$TMPFILE"

# port number
echo -e "\n##\n## bind to port (default: 80)\n##" >>"$TMPFILE"
port="`echo $LIGHTTPD_PORT | sed -e 's/[^0-9]//g'`"
test -z $port -o "$port" -eq "0" && \
    echo "#server.port = 80" >>"$TMPFILE" || \
    echo "server.port = $port" >>"$TMPFILE"

# ip address
cat <<ETX >>"$TMPFILE"

##
## bind to address (default: all)
##
ETX
if test -z "$LIGHTTPD_ADDRESS" ; then
    echo '#server.bind = ""' >>"$TMPFILE"
else
    if test "$LIGHTTPD_USE_IPV6" = "yes" ; then
	echo -n $LIGHTTPD_ADDRESS | grep -q '^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$' && \
	    echo "server.bind = \"::ffff:$LIGHTTPD_ADDRESS\"" >>"$TMPFILE" || \
	    echo "server.bind = \"$LIGHTTPD_ADDRESS\"" >>"$TMPFILE"
    else
	echo "server.bind = \"$LIGHTTPD_ADDRESS\"" >>"$TMPFILE"
    fi
fi

# user name
echo -e "\n##\n## username used to run the server\n##" >>"$TMPFILE"
test -z "$LIGHTTPD_USER" && \
    echo 'server.username = "wwwrun"' >>"$TMPFILE" || \
    echo "server.username = \"$LIGHTTPD_USER\"" >>"$TMPFILE"

# group name
echo -e "\n##\n## groupname used to run the server\n##" >>"$TMPFILE"
test -z "$LIGHTTPD_GROUP" && \
    echo 'server.groupname = "wwwrun"' >>"$TMPFILE" || \
    echo "server.groupname = \"$LIGHTTPD_GROUP\"" >>"$TMPFILE"

# event-handler
cat <<ETX >>"$TMPFILE"

##
## set the event-handler (read the performance section in the manual)
##
## select
## poll
## linux-sysepoll
##
## linux-sysepoll is recommended on kernel 2.6.
##
ETX

if test -z "$LIGHTTPD_EVENT_HANDLER"; then
    echo 'server.event-handler = "linux-sysepoll"' >>"$TMPFILE"
else
    echo "server.event-handler = \"$LIGHTTPD_EVENT_HANDLER\"" >>"$TMPFILE"
fi

# network interface
cat <<ETX >>"$TMPFILE"

##
## The basic network interface for all platforms at the syscalls read()
## and write(). Every modern OS provides its own syscall to help network
## servers transfer files as fast as possible
##
## linux-sendfile - is recommended for small files.
## writev         - is recommended for sending many large files
##
ETX

if test -z "$LIGHTTPD_NETWORK_BACKEND"; then
    echo 'server.network-backend = "linux-sendfile"' >>"$TMPFILE"
else
    echo "server.network-backend = \"$LIGHTTPD_NETWORK_BACKEND\"" >>"$TMPFILE"
fi

# file descriptors
cat <<ETX >>"$TMPFILE"

##
## As lighttpd is a single-threaded server, its main resource limit is
## the number of file descriptors, which is set to 1024 by default (on
## most systems).
##
## If you are running a high-traffic site you might want to increase this
## limit by setting server.max-fds.
##
## Changing this setting requires root permissions on startup. see
## server.username/server.groupname.
##
## By default lighttpd would not change the operation system default.
## But setting it to 2048 is a better default for busy servers.
##
ETX

fds="`echo $LIGHTTPD_MAX_FDS | sed -e 's/[^0-9]//g'`"
test 0$fds -eq 0 && \
    echo "#server.max-fds = 1024" >>"$TMPFILE" || \
    echo "server.max-fds = $fds" >>"$TMPFILE"

# caching
cat <<ETX >>"$TMPFILE"

##
## Stat() call caching.
##
## lighttpd can utilize FAM/Gamin to cache stat call.
##
## possible values are:
## disable, simple or fam.
##
ETX

if test -z "$LIGHTTPD_STAT_CACHE_ENGINE"; then
    echo 'server.stat-cache-engine = "disable"' >>"$TMPFILE"
else
    echo "server.stat-cache-engine = \"$LIGHTTPD_STAT_CACHE_ENGINE\"" >>"$TMPFILE"
fi

# max connections
cat <<ETX >>"$TMPFILE"

##
## Fine tuning for the request handling
##
## max-connections == max-fds/2 (maybe /3)
## means the other file handles are used for fastcgi/files
##
ETX

max="`echo $LIGHTTPD_MAX_CONNECTIONS | sed -e 's/[^0-9]//g'`"
test 0$max -eq 0 && \
    echo "#server.max-connections = 512" >>"$TMPFILE" || \
    echo "server.max-connections = $max" >>"$TMPFILE"

# max keep-alive idle time for connections
cat <<ETX >>"$TMPFILE"

##
## How many seconds to keep a keep-alive connection open,
## until we consider it idle.
##
## Default: 5
##
ETX

max="`echo $LIGHTTPD_MAX_KEEP_ALIVE_IDLE | sed -e 's/[^0-9]//g'`"
test -z "$max" && \
    echo "#server.max-keep-alive-idle = 5" >>"$TMPFILE" || \
    echo "server.max-keep-alive-idle = $max" >>"$TMPFILE"

# max keep-alive requests for connections
cat <<ETX >>"$TMPFILE"

##
## How many keep-alive requests until closing the connection.
##
## Default: 16
##
ETX

max="`echo $LIGHTTPD_MAX_KEEP_ALIVE_REQUESTS | sed -e 's/[^0-9]//g'`"
test -z "$max" && \
    echo "#server.max-keep-alive-requests = 16" >>"$TMPFILE" || \
    echo "server.max-keep-alive-requests = $max" >>"$TMPFILE"

# max upload size
cat <<ETX >>"$TMPFILE"

##
## Maximum size of a request in kilobytes.
## By default it is unlimited (0).
##
## Uploads to your server cant be larger than this value.
##
ETX

max="`echo $LIGHTTPD_MAX_REQUEST_SIZE | sed -e 's/[^0-9]//g'`"
test 0$max -eq 0 && \
    echo "#server.max-request-size = 0" >>"$TMPFILE" || \
    echo "server.max-request-size = $max" >>"$TMPFILE"

# max socket read time
cat <<ETX >>"$TMPFILE"

##
## Time to read from a socket before we consider it idle.
##
## Default: 60
##
ETX

max="`echo $LIGHTTPD_MAX_READ_IDLE | sed -e 's/[^0-9]//g'`"
test -z "$max" && \
    echo "#server.max-read-idle = 60" >>"$TMPFILE" || \
    echo "server.max-read-idle = $max" >>"$TMPFILE"

# max socket write time
cat <<ETX >>"$TMPFILE"

##
## Time to write to a socket before we consider it idle.
##
## Default: 360
##
ETX

max="`echo $LIGHTTPD_MAX_WRITE_IDLE | sed -e 's/[^0-9]//g'`"
test -z "$max" && \
    echo "#server.max-write-idle = 360" >>"$TMPFILE" || \
    echo "server.max-write-idle = $max" >>"$TMPFILE"

# traffic shaping
cat <<ETX >>"$TMPFILE"

##
##  Traffic Shaping
## -----------------
##
## see /usr/share/doc/lighttpd/traffic-shaping.txt
##
## Values are in kilobyte per second.
##
## Keep in mind that a limit below 32kB/s might actually limit the
## traffic to 32kB/s. This is caused by the size of the TCP send
## buffer.
##
## per server:
##
ETX

kb="`echo $LIGHTTPD_SERVER_KBYTES_PER_SECOND | sed -e 's/[^0-9]//g'`"
test 0$kb -eq 0 && \
    echo "#server.kbytes-per-second = 128" >>"$TMPFILE" || \
    echo "server.kbytes-per-second = $kb" >>"$TMPFILE"

cat <<ETX >>"$TMPFILE"

##
## per connection:
##
ETX

kb="`echo $LIGHTTPD_CONNECTION_KBYTES_PER_SECOND | sed -e 's/[^0-9]//g'`"
test 0$kb -eq 0 && \
    echo "#connection.kbytes-per-second = 32" >>"$TMPFILE" || \
    echo "connection.kbytes-per-second = $kb" >>"$TMPFILE"



# static document root
echo -e "\n##\n## A static document-root\n##" >>"$TMPFILE"
test -z "$LIGHTTPD_DOCUMENT_ROOT" && \
    echo 'server.document-root = server_root + "/htdocs"' >>"$TMPFILE" || \
    echo "server.document-root = \"$LIGHTTPD_DOCUMENT_ROOT\"" >>"$TMPFILE"

# follow symlinks
echo -e "\n##\n## Whether to follow symlinks\n##" >>"$TMPFILE"
test "$LIGHTTPD_FOLLOW_SYMLINK" = "yes" && \
    echo 'server.follow-symlink = "enable"' >>"$TMPFILE" || \
    echo 'server.follow-symlink = "disable"' >>"$TMPFILE"

# Server ID header
echo -e "\n##\n## Server ID header\n##" >>"$TMPFILE"
test -z "$LIGHTTPD_TAG" && \
    echo '#server.tag = "lighttpd"' >>"$TMPFILE" || \
    echo "server.tag = \"$LIGHTTPD_TAG\"" >>"$TMPFILE"

# index files
cat <<ETX >>"$TMPFILE"

## files to check for if .../ is requested
index-file.names = (
ETX

for file in $LIGHTTPD_INDEX_FILES ; do
    echo "  \"$file\"," >>"$TMPFILE"
done
echo ")" >>"$TMPFILE"

cat <<ETX >>"$TMPFILE"

## work around IE brokeness
\$HTTP["url"] =~ "\.pdf\$" {
  server.range-requests = "disable"
}
ETX

# non-static files
cat <<ETX >>"$TMPFILE"

##
## which extensions should not be handle via static-file transfer
##
## .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
##
static-file.exclude-extensions = (
ETX

for ext in $LIGHTTPD_STATIC_EXCLUDE_EXTENSIONS ; do
    echo "  \"$ext\"," >>"$TMPFILE"
done
echo ")" >>"$TMPFILE"

# upload directories
cat <<ETX >>"$TMPFILE"

##
## upload directories
## defaults to /var/tmp as we assume it is a local harddisk
##
ETX

if test -z "$LIGHTTPD_UPLOAD_DIRS" ; then
    echo '#server.upload-dirs = ( "/var/tmp" )' >>"$TMPFILE"
else
    echo 'server.upload-dirs = (' >>"$TMPFILE"
    for dir in $LIGHTTPD_UPLOAD_DIRS ; do
	echo "  \"$dir\"," >>"$TMPFILE"
    done
    echo ")" >>"$TMPFILE"
fi

# include from conf.d for modules
cat <<ETX >>"$TMPFILE"

##
##  Config for various Modules
##
ETX

for conf in $LIGHTTPD_CONFIGS ; do
    cat <<ETX >>"$TMPFILE"

##
## mod_$conf
##
include "conf.d/$conf.conf"
ETX
done

cat <<ETX >>"$TMPFILE"

##
## mimetype mapping
##
include "conf.d/mime.conf"

##
## SSL configuration
##
include "conf.d/ssl.conf"

##
## The debug options are moved into their own file.
## see conf.d/debug.conf for various options for request debugging.
##
include "conf.d/debug.conf"

#######################################################################
##
## custom includes like vhosts.
##
# include "conf.d/config.conf"
include_shell "cat vhosts.d/*.conf"
##
#######################################################################
ETX

# rename temp file to lighttpd.conf
chmod 0644 "$TMPFILE"
mv -f "$TMPFILE" "$LIGHTTPD_CONF"

