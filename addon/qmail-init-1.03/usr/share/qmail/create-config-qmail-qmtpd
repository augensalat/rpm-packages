#!/bin/sh
#
# check if we are started as root
# only one of UID and USER must be set correctly
#
if test "$UID" != 0 -a "$USER" != root; then
    echo >&2 "You must be root to start $0."
    exit 1
fi

#
# check for /etc/sysconfig/qmail
#
if test ! -s /etc/sysconfig/qmail ; then
    echo >&2 "No /etc/sysconfig/qmail found."
    exit 1
fi
. /etc/sysconfig/qmail

test "$QMAIL_CREATE_CONFIG" = yes || exit 0

if test -s /etc/sysconfig/mail ; then
    . /etc/sysconfig/mail
    test "$MAIL_CREATE_CONFIG" = yes || exit 0
fi

#
# set qmail config dirs
#
QMTPDDIR="${1:-/etc/qmail-qmtpd}"
QMTPDENV="$QMTPDDIR/env"

#
# define preamble of config files
#
PREAMBLE="#
#
# Automatically generated on $(env LANG=C date)
#
# PLEASE DO NOT EDIT THIS FILE
#
# Instead edit /etc/sysconfig/qmail and restart the server.
#
#"

umask 022

test -z "$QMTP_ADDRESS" -o "$QMTP_ADDRESS" = 0 && \
    echo -n >"$QMTPDENV/ADDRESS" || \
    cat >"$QMTPDENV/ADDRESS" <<ETX
$QMTP_ADDRESS
#
# IP address the QMTP daemon should bind to on this host.
# Default is "0", which means to listen on all addresses of this host.
$PREAMBLE
ETX
    
test -z "$QMTP_PORT" -o "$QMTP_PORT" = 0 && \
    echo -n >"$QMTPDENV/PORT" || \
    cat >"$QMTPDENV/PORT" <<ETX
$QMTP_PORT
#
# Port number or name (from /etc/services) for the qmtp daemon.
$PREAMBLE
ETX

# localname
if test -z "$QMTP_LOCALNAME" ; then
    test -s /etc/HOSTNAME && \
	cp /etc/HOSTNAME "$QMTPDENV/LOCALNAME" || \
	(hostname -f | grep '\.' || echo 0) >"$QMTPDENV/LOCALNAME"
else
    echo $QMTP_LOCALNAME >"$QMTPDENV/LOCALNAME"
fi
cat >>"$QMTPDENV/LOCALNAME" <<ETX
#
# Set local hostname to keep tcpserver from looking it up in DNS.
# A common choice for localname is 0. To avoid loops, you must use this
# option for servers on TCP port 53.
$PREAMBLE
ETX

# concurrency
concurrency=$(echo $QMTP_CONCURRENCY | sed -e 's/[^0-9]//g')
test -z "$concurrency" -o "$concurrency" -eq 0 && \
    echo -n >"$QMTPDENV/CONCURRENCY" || \
    cat >"$QMTPDENV/CONCURRENCY" <<ETX
$concurrency
#
# Maximum number of simultaneous qmtp daemon processes.
$PREAMBLE
ETX

# tcprules
tcprulesdir=$QMTPDDIR/rules
cat <<ETX >$tcprulesdir/data
$PREAMBLE
ETX
if test "$SMTPD_LISTEN_REMOTE" == yes; then
    if test -n "$QMTP_RELAYFROMIP" ; then
	echo "$QMTP_RELAYFROMIP " | \
	    sed 's/[[:space:]]\{1,\}/:allow,RELAYCLIENT=""\n/g' | \
	    sort -u \
	    >>$tcprulesdir/data
    fi
    echo ":allow" >>$tcprulesdir/data
else 
    cat <<ETX >>$tcprulesdir/data
127.0.0.:allow,RELAYCLIENT=""
:deny
ETX
fi
( cd $tcprulesdir; tcprules data.cdb data.tmp <data )

# message size limits
size=$(echo $QMTP_DATABYTES | sed -e 's/[^0-9]//g')
test -z "$size" && \
    echo -n >$QMTPDENV/DATABYTES || \
    cat >$QMTPDENV/DATABYTES <<ETX
$size
#
# Maximum number of bytes allowed in a message. If a message exceeds this
# limit, qmtpd returns a permanent error code to the client; in contrast,
# if the disk is full or qmtpd hits a resource limit, qmtpd returns a
# temporary error code. No limit is in effect if this file does not exist.

# Counts bytes as stored on disk, not as transmitted through the network.
# It does not count the qmtpd Received line, the qmail-queue Received
# line, or the envelope.
$PREAMBLE
ETX

# memory limits
limit=$(echo $QMTP_LIMIT | sed -e 's/[^0-9]//g')
test -z "$limit" && \
    echo -n >$QMTPDENV/LIMIT || \
    cat >$QMTPDENV/LIMIT <<ETX
$QMTP_LIMIT
#
# Memory limit in bytes for daemon.
# Important: SSL enabled tcpserver needs a lot of memory!
$PREAMBLE
ETX

# CHKRCPT
test "$QMTP_CHKRCPT" != yes && \
echo -n >$QMTPDENV/CHKRCPT || \
cat >$QMTPDENV/CHKRCPT <<ETX
1
#
# let qmail-qmtpd verify recipient address
$PREAMBLE
ETX
